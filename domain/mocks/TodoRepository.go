// Code generated by mockery 2.9.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/arnoldtherigan15/final_project_golang/domain"
	mock "github.com/stretchr/testify/mock"
)

// TodoRepository is an autogenerated mock type for the TodoRepository type
type TodoRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: todo
func (_m *TodoRepository) Create(todo *domain.Todo) (*domain.Todo, error) {
	ret := _m.Called(todo)

	var r0 *domain.Todo
	if rf, ok := ret.Get(0).(func(*domain.Todo) *domain.Todo); ok {
		r0 = rf(todo)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: todo
func (_m *TodoRepository) Delete(todo *domain.Todo) (bool, error) {
	ret := _m.Called(todo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.Todo) bool); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *TodoRepository) FindAll() ([]*domain.Todo, error) {
	ret := _m.Called()

	var r0 []*domain.Todo
	if rf, ok := ret.Get(0).(func() []*domain.Todo); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ID
func (_m *TodoRepository) FindByID(ID int) (*domain.Todo, error) {
	ret := _m.Called(ID)

	var r0 *domain.Todo
	if rf, ok := ret.Get(0).(func(int) *domain.Todo); ok {
		r0 = rf(ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: todo
func (_m *TodoRepository) Update(todo *domain.Todo) (bool, error) {
	ret := _m.Called(todo)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*domain.Todo) bool); ok {
		r0 = rf(todo)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*domain.Todo) error); ok {
		r1 = rf(todo)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
